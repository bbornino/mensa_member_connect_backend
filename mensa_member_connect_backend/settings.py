"""
Django settings for mensa_member_connect_backend project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from logging.handlers import TimedRotatingFileHandler
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Define log directory
LOG_DIR = BASE_DIR / "logs"

# Ensure the logs directory exists
os.makedirs(LOG_DIR, exist_ok=True)

# Load environment variables from .env explicitly
load_dotenv(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-23)@vm5vpch=0%*d(p^x092cfxl(hrov=3m1wep2)ll7@g5(@x"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "mensa_member_connect",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# allow your dev frontend
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:5173",
# ]

CORS_ALLOW_ALL_ORIGINS = True

AUTH_USER_MODEL = "mensa_member_connect.CustomUser"

ROOT_URLCONF = "mensa_member_connect_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mensa_member_connect_backend.wsgi.application"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(hours=18),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "postgres",  # database name
        "USER": "postgres.xbqekpsyfldqajcefsjv",  # Postgres username
        "PASSWORD": "IvPsqi1jxDBQZpbA",  # Postgres password  ipv4 password
        "HOST": "aws-1-us-east-2.pooler.supabase.com",
        "PORT": "5432",  # default Postgres port
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
#     },
#     {
#         "NAME": "mensa_member_connect.validators.custom_user_validators.StrongPasswordValidator"
#     },
# ]

AUTHENTICATION_BACKENDS = ["django.contrib.auth.backends.ModelBackend"]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# ==============================
# LOGGING CONFIGURATION
# ==============================
# Django logging setup that reads LOG_LEVEL from .env.
# Logs are stored in logs/django.log (ensure the 'logs/' directory exists).
# Adjust log level per environment: DEBUG (dev), INFO (staging), WARNING (prod).
LOG_LEVEL = os.getenv("LOG_LEVEL", "WARNING")  # Default to WARNING if not set

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": LOG_LEVEL,
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": str(LOG_DIR / "django.log"),
            "when": "midnight",  # Rotate logs at midnight
            "interval": 1,  # Rotate every 1 day
            "backupCount": 10,  # Keep the last 10 days of logs
            "formatter": "verbose",
            "delay": True,
            # When the RotatingFileHandler is used without the delay option, it opens the log file
            # as soon as the logging configuration is loaded, even before any logging takes place.
            # This can result in the file being locked for the entire process, preventing log
            # rotation (or renaming of the log file) because the file is still being held open by
            # the logging handler.
            # By setting delay: True, the RotatingFileHandler delays the opening of the log file
            # until the first log message is written. This means the file is not immediately locked
            # by the handler when the application starts, and it allows log rotation to proceed
            # without any issues. Essentially, it avoids any conflicts between the log rotation
            # process and any other process or thread that may want to access the log file
            # (like Djangoâ€™s development server, which could be holding the file open).
        },
        "console": {
            "level": LOG_LEVEL,
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        # Log database queries
        "django.db.backends": {
            "level": LOG_LEVEL,  # You can adjust this to INFO or ERROR as needed
            "handlers": ["file", "console"],  # Log to both file and console
            "propagate": False,  # Prevent it from propagating to the root logger
        },
    },
    "root": {
        "handlers": ["file", "console"],
        "level": LOG_LEVEL,
    },
}
